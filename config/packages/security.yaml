parameters:
  authenticator: dsarhoya\BaseBundle\Security\Guard\LoginFormAuthenticator

security:
  enable_authenticator_manager: true
  # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
  password_hashers:
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
  # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider

  encoders:
    Symfony\Component\Security\Core\User\User:
      algorithm: sha1
      iterations: 1
      encode_as_base64: false
    App\Entity\User: sha512

  role_hierarchy:
    ROLE_SUPER_ADMIN: [ROLE_ALLOWED_TO_SWITCH, ROLE_ADMIN]
    ROLE_ADMIN: [ROLE_USER]

  providers:
    # users_in_memory: { memory: null }
    chain_provider:
      chain:
        providers: [in_memory, user_db]
    in_memory:
      memory:
        users:
          dsy: { password: "no-importa", roles: [ 'ROLE_SUPER_ADMIN' ] }
    user_db:
      entity: { class: App\Entity\User, property: email }

  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false

    main:
      # anonymous: true
      entry_point: "%authenticator%"
      guard:
        authenticators:
          - "%authenticator%"
        provider: chain_provider
      logout:
        path: base_bundle_logout

      # activate different ways to authenticate
      # https://symfony.com/doc/current/security.html#the-firewall

      # https://symfony.com/doc/current/security/impersonating_user.html
      # switch_user: true

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    - { path: ^/secured/superadmin, roles: [ROLE_SUPER_ADMIN]}
    - { path: ^/secured/user, roles: [ROLE_USER] }
    - { path: ^/secured/admin, roles: [ROLE_USER] }

when@dev:
  parameters:
    authenticator: dsarhoya\BaseBundle\Security\Guard\NoPasswordLoginFormAuthenticator

when@test:
  security:
    password_hashers:
      # By default, password hashers are resource intensive and take time. This is
      # important to generate secure password hashes. In tests however, secure hashes
      # are not important, waste resources and increase test times. The following
      # reduces the work factor to the lowest possible values.
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: auto
        cost: 4 # Lowest possible value for bcrypt
        time_cost: 3 # Lowest possible value for argon
        memory_cost: 10 # Lowest possible value for argon
